{
  // This section includes configurations for both the MQTT client and broker (server). 
  // Even though you're using RabbitMQ as your broker, you might need client settings for connecting to RabbitMQ or any other MQTT broker you might be interfacing with.
  "MQTT": {
    // Configuration related to the MQTT broker (RabbitMQ in your case), including host, port, and credentials.
    "Broker": {
      "Host": "localhost",
      "Port": 1883,
      "SecurePort": 8883,
      "Username": "user",
      "Password": "password",
      "UseTls": false,
      "TlsSettings": {
        "Certificates": [
          {
            "Path": "path/to/certificate.pfx",
            "Password": "certificatePassword",
            "ValidateCertificate": true
          }
        ],
        "AllowUntrustedCertificates": false,
        "IgnoreCertificateChainErrors": false,
        "IgnoreCertificateRevocationErrors": false
      }
    },
    // Settings for the MQTT client, such as the client ID, session, and keep-alive period.
    "Client": {
      "ClientId": "MQTTBrokerProjectClient",
      "CleanSession": true,
      "KeepAlivePeriod": 60
    },
    "Publisher": {
      "ClientId": "MQTTPublisherClient",
      "CleanSession": true,
      "KeepAlivePeriod": 60,
      "DefaultQoS": 1,
      "TimestampGrouping": {
        "Enabled": true,
        "GroupingIntervalSeconds": 30
      }
    },
    "Subscriber": {
      "ClientId": "MQTTSubscriberClient",
      "CleanSession": true,
      "KeepAlivePeriod": 60,
      "TopicFilters": [
        {
          "Topic": "sensor/force",
          "QualityOfService": 1
        },
        {
          "Topic": "sensor/temperature",
          "QualityOfService": 1
        }
      ],
      "DefaultQoS": 1,
      "TimestampGrouping": {
        "Enabled": true,
        "GroupingIntervalSeconds": 30
      }
    }
  },
  // Defines the logging levels for different components of your application. This is crucial for monitoring and debugging.
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  // Custom section for setting topics and Quality of Service (QoS) levels for different types of sensor data your application will handle (e.g., temperature, force).
  "SensorDataSettings": {
    "Temperature": {
      "Topic": "sensors/temperature",
      "QoS": 1
    },
    "Force": {
      "Topic": "sensors/force",
      "QoS": 1
    }
  },
  "Security": {
    "Authentication": {
      "Type": "Token",
      "Users": [
        {
          "Username": "user1",
          "Token": "SomeSecureTokenHere"
        }
      ]
    },
    "Authorization": {
      "Policies": [
        {
          "Name": "CanPublish",
          "Users": [ "user1" ]
        },
        {
          "Name": "CanSubscribe",
          "Users": [ "user1" ]
        }
      ]
    }
  },
  // A placeholder for any other application-specific settings you might have. This section can be customized or expanded based on your project's needs.
  "ApplicationSettings": {
    "SomeOtherSetting": "Value"
  }
}


// Adjustments and Customizations Adjust Host and Port: Modify the "Host" and "Port" under "MQTT" > "Broker" to match your RabbitMQ server's configuration.
// Credentials: Update the "Username" and "Password" with valid credentials for your RabbitMQ server if required.
// TLS/SSL Configuration: If you're using TLS/SSL for secure communication, set "UseTls" to true and provide the necessary certificate path and password. 
//  Ensure your RabbitMQ server is configured accordingly.
// Sensor Topics and QoS: Customize the topics and QoS levels in "SensorDataSettings" based on your application's requirements.
